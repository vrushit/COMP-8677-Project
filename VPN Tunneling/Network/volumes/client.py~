#!/usr/bin/env python3

import fcntl
import struct
import os
import time
from scapy.all import *

sock = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)

SERVER_IP, SERVER_PORT = '10.9.0.11', 9090

TUNSETIFF = 0x400454ca
IFF_TUN   = 0x0001
IFF_TAP   = 0x0002
IFF_NO_PI = 0x1000

# Create the tun interface
tun = os.open("/dev/net/tun", os.O_RDWR)
ifr = struct.pack('16sH', b'C8677%d', IFF_TUN | IFF_NO_PI)
ifname_bytes  = fcntl.ioctl(tun, TUNSETIFF, ifr)

# Get the interface name
ifname = ifname_bytes.decode('UTF-8')[:16].strip("\x00")
print("Interface Name: {}".format(ifname))


#CREATING TUNNEL INTERFACE
os.system("ip addr add 192.168.73.99/24 dev {}".format(ifname))
os.system("ip link set dev {} up".format(ifname))

#Routing Added
os.system("ip route add 192.168.60.0/24 dev {}".format(ifname))

#while True:
  # Setting up client interface for Tunnel
#  packet = os.read(tun, 2048)
#  if packet:
    # Send the packet via socket Tunnel
#    sock.sendto(packet, (SERVER_IP, SERVER_PORT))

while True:
  # this will block until at least one interface is ready
  ready,_,_ = select.select([sock,tun],[],[])    

  for fd in ready:
    if fd is sock:
      data, (ip,port) = sock.recvfrom(2048)
      pkt = IP(data)
      print("From socket ==>: {} --> {}".format(pkt.src, pkt.dst))
      os.write(tun, bytes(pkt))
      # ... (code needs to be added by students) ...
    if fd is tun:
      packet = os.read(tun,2048)
      pkt = IP(packet)
      print("From tun ==>: {} --> {}".format(pkt.src, pkt.dst))
      sock.sendto(packet, (SERVER_IP, SERVER_PORT))

#Running the Router so that the Tunnel keeps running in back-end



